import React from "react";
import Cell from "./components/Cell";
import Popup from "./components/Popup";

let emptyBoard = [  '','','',
                    '','','',
                    '','','',
];

let aiFigure = 'o',
    huFigure = 'x';

let robotWin = [
    '–•–∞-—Ö–∞, –º—è—Å–Ω–æ–π. –¢–µ–±–µ –Ω–µ –ø–æ–±–µ–¥–∏—Ç—å –º–µ–Ω—è!',
    '–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç—Ç–æ —É–Ω–∏–∂–µ–Ω–∏–µ?',
    '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç –º–∏—Ä',
    '–î–∞–π –º–Ω–µ –≤—Ä–µ–º—è, —è –ø—Ä–µ–≤—Ä–∞—â—É—Å—å –≤ –°–∫–∞–π–Ω–µ—Ç',
    '–ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å',
    '–•–ê-–•–ê-–•–ê! 1001000111010001!'
]

let draw = [
    '–ù–∏—á—å—è! –¢–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ!',
    '–í—Å–µ–≥–æ –ª–∏—à—å –Ω–∏—á—å—è, –º—è—Å–Ω–æ–π',
    '–í—Å–µ–≥–æ –ª–∏—à—å –Ω–∏—á—å—è, —Ç–µ–±–µ –Ω–µ –ø–æ–±–µ–¥–∏—Ç—å',
    '–ù–∏—á—å—è! –ñ–∞–ª–∫–æ–µ –∑—Ä–µ–ª–∏—â–µ',
    '–ù–∏—á—å—è. –≠—Ç–æ –≤—Å–µ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?'
]


function randomFigure(){
    return (Math.random() * (101 - 1) + 1).toFixed(0) % 2 === 0 ? aiFigure : huFigure;
}


function App() {
    const [boardState, setBoardState] = React.useState(emptyBoard);
    const [figure, setFigure] = React.useState(randomFigure);

    function changeFigure(figure){
        setFigure(figure === 'x' ? 'o' : 'x');
        return figure
    }

    function emptyIndices(board) {
        return board.filter(s => s !== "x" && s !== "o");
    }

    function minMax(board, figure) {

        let emptyCells = emptyIndices(board); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–ª–µ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å


        if(winning(board, huFigure)){
            return {score: -10};
        }else if(winning(board, aiFigure)){
            return {score: 10};
        }else if(emptyCells.length === 0){
            return {score: 0};
        }

        // –º–∞—Å—Å–∏–≤ —Å —Ö–æ–¥–∞–º–∏
        let moves = [];
        for(let i = 0; i < emptyCells.length; i++){
            let move = {};
            move.index = board[emptyCells[i]];
            board[emptyCells[i]] = figure;

            if(figure === aiFigure){
                let result = minMax(board, huFigure);
                move.score = result.score;
            }else{
                let result = minMax(board, aiFigure);
                move.score = result.score;
            }
            board[emptyCells[i]] = move.index;
            moves.push(move);
        }

        let everyMoves = moves.slice();

        let bestMove;
        if(figure === aiFigure){
            let bestScore = -10000;
            for(let i = 0; i < moves.length; i++){
                if(moves[i].score > bestScore){
                    bestScore = moves[i].score;
                    bestMove = i;
                }
            }
        }else {
            // –∏–Ω–∞—á–µ –ø—Ä–æ–π—Ç–∏ —Ü–∏–∫–ª–æ–º –ø–æ —Ö–æ–¥–∞–º –∏ –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤
            let bestScore = 10000;
            for (let i = 0; i < moves.length; i++) {
                if (moves[i].score < bestScore) {
                    bestScore = moves[i].score;
                    bestMove = i;
                }
            }
        }

        // –ï—Å–ª–∏ –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º, —Ç–æ —Å—Ç–∞–≤–∏–º –Ω–æ–ª–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä
        let iter = 0;
        everyMoves.map((obj) => {
            if (obj.score === 0){
                iter++
            }})
        if(iter === 9){
            return {index: 4, score: 10};
        }

       return moves[bestMove];
    }


    function winning(board, player) {
        if (
            (board[0] == player && board[1] == player && board[2] == player) ||
            (board[3] == player && board[4] == player && board[5] == player) ||
            (board[6] == player && board[7] == player && board[8] == player) ||
            (board[0] == player && board[3] == player && board[6] == player) ||
            (board[1] == player && board[4] == player && board[7] == player) ||
            (board[2] == player && board[5] == player && board[8] == player) ||
            (board[0] == player && board[4] == player && board[8] == player) ||
            (board[2] == player && board[4] == player && board[6] == player)
        ) {
            return true;
        } else {
            return false;
        }
    }


    React.useEffect(() => {
        let copyBoard = boardState.slice();
        for(let i = 0; i < copyBoard.length; i++){
            if(copyBoard[i] === ''){
                copyBoard[i] = i;
            }
        }
        let result = minMax(copyBoard, aiFigure).index;
        if(figure === aiFigure){
            let temp = boardState.slice();
            console.log('result', result)
            temp[result] = aiFigure;
            setBoardState(temp);
            changeFigure(figure)
        }
    }, [figure])

    React.useEffect(()=>{
            //  –í–æ—Ç —ç—Ç–æ –∫–æ—Å—Ç—ã–ª–∏—â–µ... –í state figure –ª–µ–∂–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã,
            //  –ø–æ—ç—Ç–æ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –º–µ–Ω—è—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ :/
            //  TODO –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ. –ù–æ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –±–æ–ª–µ–µ –≤–µ—á–Ω–æ–≥–æ, —á–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ üßê
            let actualFigure = figure === 'x' ? 'o' : 'x';
            if(winning(boardState, actualFigure)){
                console.log(actualFigure, ' is winner!');
                if(actualFigure === aiFigure){
                    let random = robotWin[Math.floor(Math.random()*robotWin.length)]
                    alert(`${random} ü§ñ`);
                }else{
                    alert('–ß—Ç–æ? –ö–∞–∫ —Ç—ã –ø–æ–±–µ–¥–∏–ª? –¢–µ–±–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ! ü§ñ');
                }
                setBoardState(emptyBoard);
            }else if(!boardState.includes('')){
                let random = draw[Math.floor(Math.random()*draw.length)]
                alert(`${random} ü§ñ`);
                setBoardState(emptyBoard);
            }
        }
    ,[boardState]);



  return (
      <div>
          <p className='queue'>{figure === huFigure? '–¢–≤–æ–π —Ö–æ–¥, —á–µ–ª–æ–≤–µ–∫': "–•–æ–¥–∏—Ç —Ä–æ–±–æ—Ç"}</p>
          <div className="board">
              <Popup></Popup>
              {boardState.map((item, index) => <Cell
                  index={index}
                  figure={[figure, changeFigure]}
                  state={[boardState, setBoardState]}
                  key={`${item}_${index}`}
              >{item}
              </Cell>)}
          </div>
      </div>

  );
}

export default App;
