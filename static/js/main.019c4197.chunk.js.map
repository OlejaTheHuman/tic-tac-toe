{"version":3,"sources":["components/Cell.jsx","App.js","index.js"],"names":["Cell","children","index","state","figure","boardState","setBoardState","figureState","changeFigure","onClick","board","slice","console","log","className","winCombinations","App","React","useState","setFigure","useEffect","actualFigure","combination","i","length","split","result","j","indexOf","push","includes","alert","isWin","map","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAwBeA,MAtBf,YAAgD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,OACnC,cAAoCD,EAApC,GAAOE,EAAP,KAAmBC,EAAnB,KACA,cAAoCF,EAApC,GAAOG,EAAP,KAAoBC,EAApB,KAaA,OACI,qBAAKC,QAZW,WAEhB,GAAyB,KAAtBJ,EAAWH,GAAc,CAC5B,IAAIQ,EAAQL,EAAWM,QACvBD,EAAMR,GAASK,EACfD,EAAcI,GACdF,EAAaD,GACTK,QAAQC,IAAI,UAAWX,KAKAY,UAAU,OAArC,SACKb,KChBTS,EAAQ,CAAI,GAAG,GAAG,GACN,GAAG,GAAG,GACN,GAAG,GAAG,IAGlBK,EAAkB,CAClB,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aA2DWC,MAvDf,WACI,MAAoCC,IAAMC,SAASR,GAAnD,mBAAOL,EAAP,KAAmBC,EAAnB,KACA,EAA4BW,IAAMC,SAAS,KAA3C,mBAAOd,EAAP,KAAee,EAAf,KAmCA,SAASX,EAAaJ,GAEnB,OADAe,EAAqB,MAAXf,EAAiB,IAAM,KAC1BA,EAGZ,OAfEa,IAAMG,WAAU,WAGR,IAAIC,EAA0B,MAAXjB,EAAiB,IAAM,KA1BlD,SAAgBA,GAEV,IADF,IAAIkB,EACMC,EAAI,EAAGA,EAAIR,EAAgBS,OAAQD,IAAI,CAC3CD,EAAcP,EAAgBQ,GAAGE,MAAM,IAGvC,IAFA,IAAIvB,OAAK,EACLwB,EAAS,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAClBzB,EAAQoB,EAAYM,QAAQ,KACzBvB,EAAWH,KAAWE,EACrBsB,EAAOG,MAAK,GACPxB,EAAWH,KAAWE,GAC3BsB,EAAOG,MAAK,GAEhBP,EAAYpB,GAAS,EAEzB,IAAIwB,EAAOI,UAAS,GAGhB,OAFAC,MAAM,GAAD,OAAI3B,EAAJ,aACLE,EAAcI,IACP,IASVsB,CAAMX,IACLT,QAAQC,IAAIQ,EAAc,cAGjC,CAAChB,IAQN,qBAAKS,UAAU,QAAf,SACKT,EAAW4B,KAAI,SAACC,EAAMhC,GAAP,OAAiB,cAAC,EAAD,CAC7BA,MAAOA,EACPE,OAAQ,CAACA,EAAQI,GACjBL,MAAO,CAACE,EAAYC,GAHS,SAK/B4B,GAL+B,UAIrBA,EAJqB,YAIbhC,UC/D5BiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.019c4197.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Cell({children, index, state, figure}){\n    const [boardState, setBoardState] = state;\n    const [figureState, changeFigure] = figure;\n\n    const onClickFunc = () => {\n\n        if(boardState[index] === ''){\n        let board = boardState.slice();\n        board[index] = figureState;\n        setBoardState(board);\n        changeFigure(figureState)\n            console.log('clicked', index)\n        }\n    };\n\n    return(\n        <div onClick={onClickFunc} className=\"cell\">\n            {children}\n        </div>\n    );\n}\n\nexport default Cell;","import React from \"react\";\nimport Cell from \"./components/Cell\";\n\nlet board = [   '','','',\n                '','','',\n                '','','',\n            ];\n\nlet winCombinations = [\n    '111000000',\n    '000111000',\n    '000000111',\n    '100010001',\n    '001010100',\n    '010010010',\n    '100100100',\n    '001001001'\n];\n\n\nfunction App() {\n    const [boardState, setBoardState] = React.useState(board);\n    const [figure, setFigure] = React.useState('x');\n\n    function isWin (figure){\n        let combination;\n          for(let i = 0; i < winCombinations.length; i++){\n              combination = winCombinations[i].split('');\n              let index;\n              let result = [];\n              for(let j = 0; j < 3; j++){\n                  index = combination.indexOf('1');\n                  if(boardState[index] === figure){\n                      result.push(true);\n                  }else if(boardState[index] !== figure){\n                      result.push(false);\n                  }\n                  combination[index] = 0;\n              }\n              if(!result.includes(false)) {\n                  alert(`${figure} is win!`);\n                  setBoardState(board);\n                  return true;\n              }\n          }\n    }\n\n    React.useEffect(()=>{\n            //  Вот это костылище... В state figure лежит следующее значение фигуры,\n            //  поэтому для проверки приходится менять его обратно :/\n            let actualFigure = figure === 'x' ? 'o' : 'x';\n            if(isWin(actualFigure)){\n                console.log(actualFigure, ' is win!')\n            }\n        }\n        ,[boardState]);\n\n    function changeFigure(figure){\n       setFigure(figure === 'x' ? 'o' : 'x');\n       return figure\n    }\n\n  return (\n    <div className=\"board\">\n        {boardState.map((item, index) => <Cell\n            index={index}\n            figure={[figure, changeFigure]}\n            state={[boardState, setBoardState]}\n            key={`${item}_${index}`}\n        >{item}\n        </Cell>)}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}