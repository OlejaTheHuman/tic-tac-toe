{"version":3,"sources":["components/Cell.jsx","App.js","index.js"],"names":["Cell","children","index","state","figure","boardState","setBoardState","figureState","changeFigure","onClick","board","slice","console","log","className","emptyBoard","aiFigure","randomFigure","Math","random","toFixed","App","React","useState","setFigure","minMax","emptyCells","filter","s","emptyIndices","winning","score","length","moves","i","move","result","push","bestMove","everyMoves","bestScore","iter","map","obj","player","useEffect","copyBoard","temp","actualFigure","alert","includes","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33f22286.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Cell({children, index, state, figure}){\n    const [boardState, setBoardState] = state;\n    const [figureState, changeFigure] = figure;\n\n    const onClickFunc = () => {\n\n        if(boardState[index] === ''){\n        let board = boardState.slice();\n        board[index] = figureState;\n        setBoardState(board);\n        changeFigure(figureState)\n            console.log('clicked', index)\n        }\n    };\n\n    return(\n        <div onClick={onClickFunc} className=\"cell\">\n            {children}\n        </div>\n    );\n}\n\nexport default Cell;","import React from \"react\";\nimport Cell from \"./components/Cell\";\n\nlet emptyBoard = [  '','','',\n                    '','','',\n                    '','','',\n];\n\nlet aiFigure = 'o',\n    huFigure = 'x';\n\n\nfunction randomFigure(){\n    return (Math.random() * (101 - 1) + 1).toFixed(0) % 2 === 0 ? aiFigure : huFigure;\n}\n\n\nfunction App() {\n    const [boardState, setBoardState] = React.useState(emptyBoard);\n    const [figure, setFigure] = React.useState(randomFigure);\n\n    function changeFigure(figure){\n        setFigure(figure === 'x' ? 'o' : 'x');\n        return figure\n    }\n\n    function emptyIndices(board) {\n        return board.filter(s => s !== \"x\" && s !== \"o\");\n    }\n\n    function minMax(board, figure) {\n\n        let emptyCells = emptyIndices(board); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–ª–µ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å\n\n\n        if(winning(board, huFigure)){\n            return {score: -10};\n        }else if(winning(board, aiFigure)){\n            return {score: 10};\n        }else if(emptyCells.length === 0){\n            return {score: 0};\n        }\n\n        // –º–∞—Å—Å–∏–≤ —Å —Ö–æ–¥–∞–º–∏\n        let moves = [];\n        for(let i = 0; i < emptyCells.length; i++){\n            let move = {};\n            move.index = board[emptyCells[i]];\n            board[emptyCells[i]] = figure;\n\n            if(figure === aiFigure){\n                let result = minMax(board, huFigure);\n                move.score = result.score;\n            }else{\n                let result = minMax(board, aiFigure);\n                move.score = result.score;\n            }\n            board[emptyCells[i]] = move.index;\n            moves.push(move);\n        }\n\n        let everyMoves = moves.slice();\n\n        let bestMove;\n        if(figure === aiFigure){\n            let bestScore = -10000;\n            for(let i = 0; i < moves.length; i++){\n                if(moves[i].score > bestScore){\n                    bestScore = moves[i].score;\n                    bestMove = i;\n                }\n            }\n        }else {\n            // –∏–Ω–∞—á–µ –ø—Ä–æ–π—Ç–∏ —Ü–∏–∫–ª–æ–º –ø–æ —Ö–æ–¥–∞–º –∏ –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤\n            let bestScore = 10000;\n            for (let i = 0; i < moves.length; i++) {\n                if (moves[i].score < bestScore) {\n                    bestScore = moves[i].score;\n                    bestMove = i;\n                }\n            }\n        }\n\n        // –ï—Å–ª–∏ –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º, —Ç–æ —Å—Ç–∞–≤–∏–º –Ω–æ–ª–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä\n        let iter = 0;\n        everyMoves.map((obj) => {\n            if (obj.score === 0){\n                iter++\n            }})\n        if(iter === 9){\n            return {index: 4, score: 10};\n        }\n\n       return moves[bestMove];\n    }\n\n\n    function winning(board, player) {\n        if (\n            (board[0] == player && board[1] == player && board[2] == player) ||\n            (board[3] == player && board[4] == player && board[5] == player) ||\n            (board[6] == player && board[7] == player && board[8] == player) ||\n            (board[0] == player && board[3] == player && board[6] == player) ||\n            (board[1] == player && board[4] == player && board[7] == player) ||\n            (board[2] == player && board[5] == player && board[8] == player) ||\n            (board[0] == player && board[4] == player && board[8] == player) ||\n            (board[2] == player && board[4] == player && board[6] == player)\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    React.useEffect(() => {\n        let copyBoard = boardState.slice();\n        for(let i = 0; i < copyBoard.length; i++){\n            if(copyBoard[i] === ''){\n                copyBoard[i] = i;\n            }\n        }\n        let result = minMax(copyBoard, aiFigure).index;\n        if(figure === aiFigure){\n            let temp = boardState.slice();\n            console.log('result', result)\n            temp[result] = aiFigure;\n            setBoardState(temp);\n            changeFigure(figure)\n        }\n    }, [figure])\n\n    React.useEffect(()=>{\n            //  –í–æ—Ç —ç—Ç–æ –∫–æ—Å—Ç—ã–ª–∏—â–µ... –í state figure –ª–µ–∂–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã,\n            //  –ø–æ—ç—Ç–æ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –º–µ–Ω—è—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ :/\n            //  TODO –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ. –ù–æ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –±–æ–ª–µ–µ –≤–µ—á–Ω–æ–≥–æ, —á–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ üßê\n            let actualFigure = figure === 'x' ? 'o' : 'x';\n            if(winning(boardState, actualFigure)){\n                console.log(actualFigure, ' is winner!');\n                alert(`${actualFigure} is winner!`);\n                setBoardState(emptyBoard);\n            }else if(!boardState.includes('')){\n                alert('So... try one more time');\n                setBoardState(emptyBoard);\n            }\n        }\n    ,[boardState]);\n\n\n\n  return (\n    <div className=\"board\">\n        {boardState.map((item, index) => <Cell\n            index={index}\n            figure={[figure, changeFigure]}\n            state={[boardState, setBoardState]}\n            key={`${item}_${index}`}\n        >{item}\n        </Cell>)}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}